ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
rm(list = ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
q1 <- lm(x,w)
q1 <- lm(x~w)
summary(q1)
q1$coefficients
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch~gpr)
l_nor <- lm(gch~gpa)
l_nor <- lm(gch_nor~gpa_nor)
rm(list = ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(y,x)
cor(y~x)
summary(lm(y,x))
summary(lm(y~x))
cor(x,y)
l_2 <- lm(y~x)
l_2$coefficients
data("mtcars")
l_3 <- lm(mtcars$mpg~mtcars$wt)
l_3$coefficients
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xnorm <- (x - mean(x))/sd(x)
xnorm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
l_2$model
l_2$fitted.values
1.5 * 4
1.5*0.4
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lreg <- lm(y~x-1)
summary(lreg)
data(mtcars)
summary(lm(mtcars$mpg, mtcars$wt))
summary(lm(mtcars$mpg~mtcars$wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x)) / sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lreg <- lm(y~x)
summary(lreg)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
rm(list = ls())
x <- galton$parent
y <- galton$child
as.data.frame(as.table(x,y))
as.data.frame(table(x,y))
?as.table
?table
rm(list = ls())
library(UsingR)
data("diamond")
diamond
g <- ggplot(data = diamond, aes(x = carat, y = price))
g <- g + geom_point(size = 2, colour = "black", alpha = 0.2)
g
g <- g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g
g <- g + geom_smooth(method = "lm", colour = "red")
g
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
plot(diamond$carat, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
plot(x, y); abline(lm(y ~ x))
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
plot(x, y); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "red"); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "black", fill = red); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "black", fill = "red"); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "red"); abline(lm(y ~ x))
warnings()
g
g <- ggplot(data = diamond, aes(x = diamond$carat, y = diamond$price))
g + geom_point()
g + geom_point(colour = "blue", size = 2, aplha = 0.2)
g + geom_point(colour = "blue", size = 2, alpha = 0.2)
g + geom_point(colour = "blue", size = 2, alpha = 0.2) + geom_hline(lm(diamond$price~diamond$carat))
g + geom_point(colour = "blue", size = 2, alpha = 0.2) + geom_hline()
g + geom_point(colour = "blue", size = 2, alpha = 0.2) + geom_hline(yintercept = 0)
g <- ggplot(data = diamond, aes(x = diamond$carat, y = resid(lm(diamond$price~diamond$carat))))
g
g + geom_hline(yintercept = 0) + geom_point(colour = "blue", size = 3)
rm(list = ls())
swirl()
fit <- lm(child~parent, data = galton)
sqrt(sum(fit$residuals^2/n-1))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sum((galton$child - mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sum(fit$residuals^2))
sRes <- deviance(sum((fit$residuals)^2))
sRes <- deviance(sum((fit$residuals))
)
sRes <- deviance(galton$child^2)
sRes <- deviance(sTot)
sRes <- deviance(galton)
sRes <- deviance(fit)
1 - (sRes/sTot)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
0
quit
quit()
hi
rm()
0
quit()
back()
swirl::bye()
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child~ones + parent - 1, galton)
lm(child~parent, galton)
lm(child~1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
sum(swiss$Examination,swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
rm(list = ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
data("mtcars")
summary(lm(mpg~weight, mtcars))
summary(lm(mtcars$mpg~mtcars$wt))
>mtcars
?mtcars
library(UsingR)
y <- galton$child
# regressor
x <- galton$parent
summary(lm(y~x))
ggplot(data = as.data.frame(x,y), aes(x,y)) + geom_abline(lm(y~x))
?predict
predict(lm(y~x), interval = "confidence")
summary(lm(y~x))
data("mtcars")
fit <- lm(mtcars$mpg~mtcars$wt)
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "confidence")
confint(fit)
predict.lm(fit, newdata = data.frame(wt = 3))
data("cars")
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, color='#2C3E50')
cars.lm <- lm(dist ~ speed, data = cars)
summary(cars.lm)
new.dat <- data.frame(speed=30)
predict(cars.lm, newdata = new.dat, interval = 'confidence')
View(cars)
head(mtcars)
new.dat <- data.frame(wt = 3)
predict(fit, newdata = new.dat, interval = "confidence")
confint.lm(fit)
predict(fit, new.dat)
predict(fit, new.dat, interval = "predict")
predict(fit, interval = "predict")
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = data.frame(wt = 3), interval = "prediction")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(fit)
fit <- lm(y ~ x)
summary(fit)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
summary(fit_car)
rm(list = ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
data("mtcars")
fit_cars <- lm(mpg~wt, data = mtcars)
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
predict(fit_cars, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
predict(fit_cars, newdata = data.frame(wt = 3), interval = "predict")
fit_cars2 <- lm(mpg~I(wt/2), data = mtcars)
predict(fit_cars2, newdata = data.frame(wt = 1), interval = "predict")
predict(fit_cars2, newdata = data.frame(wt = 1), interval = "confidence")
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
sumCoef2 <- coef(summary(fit_cars2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_cars2$df) * sumCoef2[2, 2])
sumCoef2
sumCoef2[2,1]
sumCoef2[2,2]
fit <- lm(y~x)
fit2 <- lm(y~I(x/100))
coef(fit)
coef(fit2)
require(datasets)
data("swiss")
head(swiss)
library(ggplot2)
require(GGally)
install.packages("GGally")
library(GGally)
ggpairs(data = swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g <- ggpairs(data = swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
summary(lm(Fertility ~ ., data = swiss))
summary(lm(Fertility ~ Agriculture, data = swiss))
rm(list = ls())
library(swirl)
install.packages("leaflet")
install.packages("car")
# installing/loading the latest installr package:
install.packages("installr") # install installr
library(installr) #load
updateR()
setwd("~/datasciencecoursera/Developing Data Projects/Peer Project")
setwd("~/datasciencecoursera/Developing Data Products/Peer Project")
setwd("~/datasciencecoursera/Developing Data Products/CentralLimitTheorem")
shiny::runApp()
runApp('~/datasciencecoursera/Developing Data Products/MyApp')
library(shiny)
runApp('~/datasciencecoursera/Developing Data Products/MyApp')
runApp('~/datasciencecoursera/Developing Data Products/CentralLimitTheorem')
runApp()
runApp()
sample(1:10, size = 5, replace = TRUE)
av <- for(i in 1:3000) {
sample(1:10, size = 5, replace = TRUE)
}
head(av)
av
for(i in 1:3000) {
av[i] <- sample(1:10, size = 5, replace = TRUE)
}
warnings()
head(av)
av
dim(av)
str(av)
for(i in 1:3000) {
av[i,] <- sample(1:10, size = 5, replace = TRUE)
}
for(i in 1:3000) {
for (j in 1:5) {
av[i, j] <- sample(1:10, size = 1)
}
}
av
av[1]
sample(1:10, size = 5, replace = TRUE)
ave <- sample(1:10, size = 5, replace = TRUE)
ave
ave[1]
ave[2]
for(i in 1:3000) {
av[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(av)
for(i in 1:100000) {
av[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(av)
hist(av, bin = 10)
library(ggplot2)
hist(av)
?hist
hist(av, breaks = 10)
for(i in 1:10) {
av[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(av, breaks = 10)
for(i in 1:10) {
av[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
for(i in 1:10) {
ave[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(ave, breaks = 10)
for(i in 1:100) {
ave[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(ave, breaks = 10)
for(i in 1:1000) {
ave[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(ave, breaks = 10)
for(i in 1:10000) {
ave[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(ave, breaks = 10)
for(i in 1:100000) {
ave[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(ave, breaks = 10)
for(i in 1:1000000) {
ave[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
hist(ave, breaks = 10)
for(i in 1:100) {
ave[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
for(i in 1:100) {
aver[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
rm(list = ls())
for(i in 1:100) {
aver[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
for(i in 1:100) {
average[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
for(i in 1:100) {
av[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
average
average <- 1:100
for(i in 1:100) {
average[i] <- mean(sample(1:10, size = 5, replace = TRUE))
}
ggplot(data = average, aes(x = average))
ggplot(data = average, aes(x = average)) + geom_histogram(bins = 10)
average <- matrix(average)
head(average)
ggplot(data = average, aes(x = average[1,])) + geom_histogram(bins = 10)
average <- data.frame(average)
ggplot(data = average, aes(x = average$average)) + geom_histogram(bins = 10)
ggplot(data = average, aes(x = average)) + geom_histogram(bins = 10)
ggplot(data = average, aes(x = average)) + geom_histogram(bins = 10) + geom_smooth()
ggplot(data = average, aes(x = average)) + geom_histogram(bins = 10) + geom_density()
ggplot(data = average, aes(x = average)) + geom_density()
ggplot(data = average, aes(x = average)) + geom_histogram(bins = 10) + geom_density(colour = "red")
ggplot(data = average, aes(x = average)) + geom_density()
?geom_histogram
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10) + geom_density(colour = "red")
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10)
ggplot(data = average, aes(x = average), stat(density)) + geom_density()
ggplot(data = average, aes(x = average), stat(density)) + geom_density() + geom_vline(xintercept = mean(1:10))
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10)+ geom_vline(xintercept = mean(1:10))
mean(average)
mean(average$average)
sd(average$average)
var(average$average)
median(average$average)
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10, binwidth = 1)+ geom_vline(xintercept = mean(1:10))
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10, binwidth = 0.5)+ geom_vline(xintercept = mean(1:10))
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(binwidth = 1)+ geom_vline(xintercept = mean(1:10))
?geom_histogram
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(breaks = 10)+ geom_vline(xintercept = mean(1:10))
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10)+ geom_vline(xintercept = mean(1:10))
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(1:10))
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(1:10), colour = "red", cex = 2)
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(1:10), colour = "red", cex = 2, style = "dotted")
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(1:10), colour = "red", cex = 1)
ggplot(data = average, aes(x = average), stat(density)) + geom_density()+ geom_vline(xintercept = mean(1:10), colour = "red", cex = 1)
ggplot(data = average, aes(x = average), stat(density)) + geom_density(colour = "black", fill = "blue")+ geom_vline(xintercept = mean(1:10), colour = "red", cex = 1)
facet_grid(rows = 2, cols = 1)
facet_grid(rows = 2)
ggplot(data = average, aes(x = average), stat(density)) + geom_histogram(bins = 10, colour = "black", fill = "blue", prob = TRUE)+ geom_vline(xintercept = mean(1:10), colour = "red", cex = 1)
?stat
runApp('~/datasciencecoursera/Developing Data Products/MyApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/datasciencecoursera/Developing Data Products/MyApp')
for (i in 1:50) {
aver[i] <- sample(25:50, size = 5, replace = TRUE)
}
aver <- 1:50
for (i in 1:50) {
aver[i] <- sample(25:50, size = 5, replace = TRUE)
}
for (i in 1:50) {
aver[i] <- mean(sample(25:50, size = 5, replace = TRUE))
}
hist(aver)
aver <- data.frame(aver)
ggplot(data = aver, aes(x = aver)) + geom_histogram(bins = 10, colour = "black", fill = "blue", prob = TRUE)+ geom_vline(xintercept = mean(25:50), colour = "red", cex = 1)
ggplot(data = aver, aes(x = aver)) + geom_histogram(bins = 20, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(25:50), colour = "red", cex = 1)
mean(25:50)
library(googleVis)
for (i in 1:500) {
aver[i] <- mean(sample(25:50, size = 5, replace = TRUE))
}
aver <- data.frame(aver)
ggplot(data = aver, aes(x = aver)) + geom_histogram(bins = 20, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(25:50), colour = "red", cex = 1)
aver
aver <- 1:500
for (i in 1:500) {
aver[i] <- mean(sample(25:50, size = 5, replace = TRUE))
}
ggplot(data = aver, aes(x = aver)) + geom_histogram(bins = 20, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(25:50), colour = "red", cex = 1)
aver <- data.frame(aver)
ggplot(data = aver, aes(x = aver)) + geom_histogram(bins = 20, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(25:50), colour = "red", cex = 1)
aver <- 1:1600
for (i in 1:1600) {
aver[i] <- mean(sample(25:50, size = 5, replace = TRUE))
}
aver <- data.frame(aver)
ggplot(data = aver, aes(x = aver)) + geom_histogram(bins = 20, colour = "black", fill = "blue")+ geom_vline(xintercept = mean(25:50), colour = "red", cex = 1)
runApp()
runApp('~/datasciencecoursera/Developing Data Products/MyApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/datasciencecoursera/Developing Data Products/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/CentralLimitTheorem')
runApp('~/CentralLimitTheorem')
runApp('~/datasciencecoursera/Developing Data Products/test')
mean(96, 100, 106, 114)
median(96, 100, 106, 114)
median(96,100,106,114)
median(c(96,100,106,114))
mean(c(96,100,106,114))
var(c(1, 3, 5, 7))
var(c(1, 3, 5, 7)) * (3/4)
sd(c(1, 3, 5, 7))
