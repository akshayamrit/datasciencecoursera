Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
library(datasets)
hist(airquality$Ozone)
?bg
??bg
library(datasets)
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
?with
?plot
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
install.packages(c("fields", "hms", "pkgbuild", "rgl", "rmarkdown", "sys", "xfun"))
head(stormData.damage.analysis, n = 10)
if(!file.exists("StormData.csv.bz2")) {
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "StormData.csv.bz2", method = "curl")
}
if(!file.exists("StromDataDoc.pdf")){
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf",
destfile = "StromDataDoc.pdf", method = "curl")
}
library(data.table)
readTime <- proc.time()
stormData <- fread("StormData.csv.bz2")
proc.time()-readTime
rm(readTime)
dim(stormData)
str(stormData)
length(unique(stormData$EVTYPE))
# Removing unwanted columns from table:
library(tidyverse)
stormData <- stormData %>% select(c(BGN_DATE, COUNTY, COUNTYNAME, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP))
# Removing redundant rows:
stormData <- stormData %>% filter(FATALITIES != 0 | INJURIES != 0 | PROPDMG != 0 | CROPDMG != 0)
# Changing format of Columns:
library(lubridate)
stormData$BGN_DATE <-  mdy_hms(stormData$BGN_DATE)
stormData$EVTYPE <- str_squish(stormData$EVTYPE)
stormData$PROPDMGEXP <- as.factor(str_to_upper(stormData$PROPDMGEXP))
stormData$CROPDMGEXP <- as.factor(str_to_upper(stormData$CROPDMGEXP))
# Using EXP columns to modify DMG and removing them.
stormData <- stormData %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% c("", "?", "-"), PROPDMG * 0, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "+", PROPDMG * 1, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "H", PROPDMG * 100, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "K", PROPDMG * 1000, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "M", PROPDMG * 1000000, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "B", PROPDMG * 1000000000, PROPDMG))
stormData <- stormData %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% c("", "?", "-"), CROPDMG * 0, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "+", CROPDMG * 1, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "H", CROPDMG * 100, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "K", CROPDMG * 1000, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "M", CROPDMG * 1000000, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "B", CROPDMG * 1000000000, CROPDMG))
stormData <- stormData %>% select(-c(PROPDMGEXP, CROPDMGEXP))
# Extracting list of events from Documentation.
library(pdftools)
documentation.events <- pdf_text("StromDataDoc.pdf") %>% read_lines()
firstLine <- grep("2.1.1   Storm Data Event Table", documentation.events)
documentation.events <- documentation.events[(firstLine + 2): (firstLine + 25)]
rm(firstLine)
documentation.events <- documentation.events %>%
str_replace_all(pattern = "Z$", replacement = "") %>%
str_replace_all(pattern = "C$", replacement = "") %>%
str_replace_all(pattern = "M$", replacement = "") %>%
str_replace_all(pattern = " Z ", replacement = ".") %>%
str_replace_all(pattern = " C ", replacement = ".") %>%
str_replace_all(pattern = " M ", replacement = ".") %>%
strsplit(split = ".", fixed = TRUE) %>%
unlist() %>%
str_squish()
# Modifying event types in stormData table to match with values present in documentation
for(i in 1:length(documentation.events)){
stormData[agrepl(pattern = documentation.events[i], x = stormData$EVTYPE, ignore.case = TRUE),5] = documentation.events[i]
}
rm(i)
str(stormData)
length(unique(stormData$EVTYPE))
# Creating table to be used to answer our first query.
stormData.harm <- stormData %>%
group_by(year = year(BGN_DATE), EVTYPE) %>%
summarize(pop.harm = sum(FATALITIES)+sum(INJURIES)) %>%
arrange(year)
# Determining whether typos in events will have impact on our result
stormData.harm.analysis <- stormData.harm %>%
group_by(EVTYPE) %>%
summarize(pop.harm = sum(pop.harm)) %>%
arrange(desc(pop.harm))
stormData.harm.analysis <- stormData.harm.analysis %>%
mutate(EVTYPE = if_else(!(str_to_upper(EVTYPE) %in% str_to_upper(documentation.events)), "Others", EVTYPE)) %>%
group_by(EVTYPE) %>%
summarize(pop.harm = sum(pop.harm)) %>%
arrange(desc(pop.harm))
# Creating table to be used to answer our first query.
stormData.damage <- stormData %>%
group_by(year = year(BGN_DATE), EVTYPE) %>%
summarize(eco.cq = sum(PROPDMG)+sum(CROPDMG)) %>%
arrange(year)
# Determining whether typos in events will have impact on our result
stormData.damage.analysis <- stormData.damage %>%
group_by(EVTYPE) %>%
summarize(eco.cq = sum(eco.cq)) %>%
arrange(desc(eco.cq))
head(stormData.damage.analysis, n = 10)
stormData.damage.analysis <- stormData.damage.analysis %>%
mutate(EVTYPE = if_else(!(str_to_upper(EVTYPE) %in% str_to_upper(documentation.events)), "Others", EVTYPE)) %>%
group_by(EVTYPE) %>%
summarize(eco.cq = sum(eco.cq)) %>%
arrange(desc(eco.cq))
head(stormData.damage.analysis, n = 10)
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE))
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0)
head(stormData.damage.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.damage.analysis, aes(x = "", y = eco.cq, fill = EVTYPE))
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0)
?aes
?coord_polar
?geom_bar
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done by Each Event on Human Health")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health") + ylab("Impact on Population Health")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health") + ylab("Impact on Population Health") + xlab("")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health",ylab("Impact on Population Health"),xlab(""))
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) + ylab("Impact on Population Health") + xlab("")
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) + ylab("Impact on Population Health") + xlab("")
?labs
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) labs(x = "", y = "Impact on Population Health", fill = "Event Types")
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) + labs(x = "", y = "Impact on Population Health", fill = "Event Types")
head(stormData.damage.analysis, n = 10)
# Visualizing table
g.eco <- ggplot(data = stormData.damage.analysis, aes(x = "", y = eco.cq, fill = EVTYPE)) + geom_bar(stat = "identity")
g.eco + coord_polar("y", start = 0) + labs(x = "", y = "Economic Consequences", fill = "Event Types")
head(stormData.harm, n = -10)
stormData.harm[stormData.harm$year == 2011,]
stormData.harm[stormData.harm$year == 2012,]
library(swirl)
swirl()
swirl()
swirl()
0.8^2
08*2
0.8*2
0.8^2
mypdf()
mypdf
integrate(mypdf, 0, 1.6)
0.5*(1.6^2)/4
0.5*(2^2)/4
sqrt(2)
99.7*.001
0.001 * 0.997
1
0.003 * 0.999
0.015 * 0.9999
0.015 * 0.999
(0.003 * 0.999) / (0.015 * 0.999 + 0.003 * 0.999)
(0.001 * 0.997) / (0.001 * 0.997 + 0.015 * 0.999)
bye()
rm(list = ls())
swirl()
1:6
sum(1:6)/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
rm(list = ls())
dev.off()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x * p)
library(swirl)
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr * PDF)
ex2_fair <- sum(dice_sqr * 1/6)
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
bye()
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd = 3, col = "red")
summary(regrline)
rm(list = ls())
library(ggplot2)
library(UsingR)
as.data.frame(galton$child, galton$parent)
as.data.frame(as.table(galton))
as.data.frame(as.table(galton$child, galton$parent))
as.table(galton)
as.table(galton$child)
head(galton)
swirl()
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coeff[1]
ols.ic <- fit$coef[1]
ols.ic <- fit$coef[2]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
rm(list = ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
q1 <- lm(x,w)
q1 <- lm(x~w)
summary(q1)
q1$coefficients
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch~gpr)
l_nor <- lm(gch~gpa)
l_nor <- lm(gch_nor~gpa_nor)
rm(list = ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(y,x)
cor(y~x)
summary(lm(y,x))
summary(lm(y~x))
cor(x,y)
l_2 <- lm(y~x)
l_2$coefficients
data("mtcars")
l_3 <- lm(mtcars$mpg~mtcars$wt)
l_3$coefficients
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xnorm <- (x - mean(x))/sd(x)
xnorm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
l_2$model
l_2$fitted.values
1.5 * 4
1.5*0.4
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lreg <- lm(y~x-1)
summary(lreg)
data(mtcars)
summary(lm(mtcars$mpg, mtcars$wt))
summary(lm(mtcars$mpg~mtcars$wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x)) / sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lreg <- lm(y~x)
summary(lreg)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
rm(list = ls())
x <- galton$parent
y <- galton$child
as.data.frame(as.table(x,y))
as.data.frame(table(x,y))
?as.table
?table
rm(list = ls())
library(UsingR)
data("diamond")
diamond
g <- ggplot(data = diamond, aes(x = carat, y = price))
g <- g + geom_point(size = 2, colour = "black", alpha = 0.2)
g
g <- g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g
g <- g + geom_smooth(method = "lm", colour = "red")
g
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
plot(diamond$carat, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
plot(x, y); abline(lm(y ~ x))
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
plot(x, y); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "red"); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "black", fill = red); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "black", fill = "red"); abline(lm(y ~ x))
x <- runif(100, -3, 3); y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y, col = "red"); abline(lm(y ~ x))
warnings()
g
g <- ggplot(data = diamond, aes(x = diamond$carat, y = diamond$price))
g + geom_point()
g + geom_point(colour = "blue", size = 2, aplha = 0.2)
g + geom_point(colour = "blue", size = 2, alpha = 0.2)
g + geom_point(colour = "blue", size = 2, alpha = 0.2) + geom_hline(lm(diamond$price~diamond$carat))
g + geom_point(colour = "blue", size = 2, alpha = 0.2) + geom_hline()
g + geom_point(colour = "blue", size = 2, alpha = 0.2) + geom_hline(yintercept = 0)
g <- ggplot(data = diamond, aes(x = diamond$carat, y = resid(lm(diamond$price~diamond$carat))))
g
g + geom_hline(yintercept = 0) + geom_point(colour = "blue", size = 3)
rm(list = ls())
swirl()
fit <- lm(child~parent, data = galton)
sqrt(sum(fit$residuals^2/n-1))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sum((galton$child - mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sum(fit$residuals^2))
sRes <- deviance(sum((fit$residuals)^2))
sRes <- deviance(sum((fit$residuals))
)
sRes <- deviance(galton$child^2)
sRes <- deviance(sTot)
sRes <- deviance(galton)
sRes <- deviance(fit)
1 - (sRes/sTot)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
0
quit
quit()
hi
rm()
0
quit()
back()
swirl::bye()
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child~ones + parent - 1, galton)
lm(child~parent, galton)
lm(child~1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
sum(swiss$Examination,swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
rm(list = ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
data("mtcars")
summary(lm(mpg~weight, mtcars))
summary(lm(mtcars$mpg~mtcars$wt))
>mtcars
?mtcars
library(UsingR)
y <- galton$child
# regressor
x <- galton$parent
summary(lm(y~x))
ggplot(data = as.data.frame(x,y), aes(x,y)) + geom_abline(lm(y~x))
?predict
predict(lm(y~x), interval = "confidence")
summary(lm(y~x))
data("mtcars")
fit <- lm(mtcars$mpg~mtcars$wt)
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "confidence")
confint(fit)
predict.lm(fit, newdata = data.frame(wt = 3))
data("cars")
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, color='#2C3E50')
cars.lm <- lm(dist ~ speed, data = cars)
summary(cars.lm)
new.dat <- data.frame(speed=30)
predict(cars.lm, newdata = new.dat, interval = 'confidence')
View(cars)
head(mtcars)
new.dat <- data.frame(wt = 3)
predict(fit, newdata = new.dat, interval = "confidence")
confint.lm(fit)
predict(fit, new.dat)
predict(fit, new.dat, interval = "predict")
predict(fit, interval = "predict")
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = data.frame(wt = 3), interval = "prediction")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(fit)
fit <- lm(y ~ x)
summary(fit)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
summary(fit_car)
rm(list = ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
data("mtcars")
fit_cars <- lm(mpg~wt, data = mtcars)
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
predict(fit_cars, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
predict(fit_cars, newdata = data.frame(wt = 3), interval = "predict")
fit_cars2 <- lm(mpg~I(wt/2), data = mtcars)
predict(fit_cars2, newdata = data.frame(wt = 1), interval = "predict")
predict(fit_cars2, newdata = data.frame(wt = 1), interval = "confidence")
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
sumCoef2 <- coef(summary(fit_cars2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_cars2$df) * sumCoef2[2, 2])
sumCoef2
sumCoef2[2,1]
sumCoef2[2,2]
fit <- lm(y~x)
fit2 <- lm(y~I(x/100))
coef(fit)
coef(fit2)
require(datasets)
data("swiss")
head(swiss)
library(ggplot2)
require(GGally)
install.packages("GGally")
library(GGally)
ggpairs(data = swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g <- ggpairs(data = swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
summary(lm(Fertility ~ ., data = swiss))
summary(lm(Fertility ~ Agriculture, data = swiss))
rm(list = ls())
library(swirl)
install.packages("leaflet")
install.packages("car")
# installing/loading the latest installr package:
install.packages("installr") # install installr
library(installr) #load
updateR()
setwd("~/datasciencecoursera/Developing Data Products")
shiny::runApp('MyApp')
