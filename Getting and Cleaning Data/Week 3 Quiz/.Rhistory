library(devtools)
install.packages("slidify")
search()
install_github("slidify","ramnathv")
install_github("slidify","ramnathv")
install_github(slidify','ramnathv')
install_github('slidify','ramnathv')
library(devtools)
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)
search()
library(slidify)
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
find.package("KernSmooth")
library(KernSmooth)
clear()
m <- matrix(rnorm(25,10), nrow = 5,ncol = 5)
m
solve(m)
library("matlib")
library(matlib)
install.packages("matlib")
matlib::inv(m) == solve(m)
matlib::inv(m)
solve(m)
library(xlsx)
fun(libname, pkgname)
library(openxlsx)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_211')
library(rJava)
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
Sys.setenv(JAVA_HOME="C:\Program Files (x86)\Java\jre1.8.0_211")
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_211")
find.java()
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- readLines(url)
sapply(con, nchar)
sapply(con[c(10,20,30,100)], nchar)
library(readr)
read_fwf(file = "getdata_wksst8110.for")
setwd("~/datasciencecoursera")
read_fwf(file = "getdata_wksst8110.for")
?read_fwf
read_fwf(file = "getdata_wksst8110.for", skip = 3, col_positions = fwf_empty("getdata_wksst8110.for",skip = 3))
read_fwf(file = "getdata_wksst8110.for", skip = 4, col_positions = fwf_empty("getdata_wksst8110.for",skip = 3))
fwfFile <- read_fwf(file = "getdata_wksst8110.for", skip = 3, col_positions = fwf_empty("getdata_wksst8110.for",skip = 3))
fwfFile <- read_fwf(file = "getdata_wksst8110.for", skip = 4, col_positions = fwf_empty("getdata_wksst8110.for",skip = 4))
fwfFile <- read_fwf(file = "getdata_wksst8110.for", skip = 4, col_positions = fwf_empty("getdata_wksst8110.for",skip = 5))
fwfFile))
fwfFile
fwf_empty("getdata_wksst8110.for", sskip = 0)
fwf_empty("getdata_wksst8110.for", skip = 0)
fwfFile <- read_fwf(file = "getdata_wksst8110.for", skip = 4, col_positions = fwf_widths(c(10, 9, 4, 9, 4, 9, 4, 9, 4)))
View(fwfFile)
sum(fwfFile[4,2:9])
fwfFile[4,2:9]
sapply(fwfFile, sum)
sapply(fwfFile[,2:9], sum)
set.seed((13435))
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5),]
X$var2[c(1,3)] = NA
X
library(plyr)
arrange(X, var2)
arrange(X, var1)
arrange(X, desc(var2))
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(url = fileUrl, destfile = "restaurants.csv", method = "curl")
restData <- read_csv("restaurants.csv")
head(restData)
str(restData)
summary(restData)
summary(restData$zipCode)
library(data.table)
data.table(restData$zipCode)
table(restData$zipCode)
head(fwfFile)
head(restData)
?xtabs
xtabs(zipcode ~ policeDistrict, data = restData)
xtabs(zipCode ~ policeDistrict, data = restData)
?data.frame
?as.data.frame
xtabs(zipCode ~ councilDistrict + neighorhood, data = restData)
xtabs(zipCode ~ councilDistrict + neighborhood, data = restData)
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
head(restData)
sum(restData$nearMe)
library(mtcars)
library(reshape2)
mtcars
library(dplyr)
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("~/Data_Science_Specialization_Material/03_GettingData/dplyr/chicago.rds")
dim(chicago)
str(chicago)
names(chicago)
head(select(chicago, city: dptp))
chicago.f <- filter(chicago, city %in% chic)
chicago.f <- filter(chicago, city==chic)
chicago.f <- filter(chicago, tmpd<30)
chicago.f
chicago.f <- filter(chicago, city %in% "chic")
head(chicago.f)
chicago <- arrange(chicago, date)
chicago
chicago <- arrange(chicago, desc(date))
chicago
names(chicago)
chicago <- rename(chicago, pm25 = pm25tmean2, pm10 = pm10tmean2, o3 = o3tmean2, no2 = no2tmean2)
chicago
head(chicago)
?factor
a <- 1:10
a <- as.data.frame(a)
a
a <- mutate(a, fact = factor(a<5, labels = c("small", "large")))
a
a <- mutate(a, fact = factor(a>5, labels = c("small", "large")))
a
a <- mutate(a, fact = factor(1 * (a>5), labels = c("small", "large")))
a
a <- mutate(a, fact = factor(1 * (a>5), labels = c("small", "large", "big")))
a
summarize(a)
summarize(a)
summarize(a, a = mean(a))
summarize(a, fact, a = mean(a))
agroup <- group_by(a, fact)
agroup
summarize(a, a = mean(a))
summarize(agroup, a = mean(a))
head(chicago)
as.POSIXlt(chicago$date)
as.POSIXlt(chicago$date)$year
as.POSIXlt(chicago$date)$year+1900
da <- as.POSIXlt(chicago$date)
da$date
da$Month
str(da)
da$year
da$mon
da$dare
da$date
?as.POSIXlt
da$Y
rm(list = ls())
library(readr)
dataset <- read_csv(reviews.csv)
library(readr)
reviews <- read_csv("~/Data_Science_Specialization_Material/03_GettingData/03_05_mergingData/data/reviews.csv")
View(reviews)
library(readr)
solutions <- read_csv("~/Data_Science_Specialization_Material/03_GettingData/03_05_mergingData/data/solutions.csv")
View(solutions)
mergedData <- merge(reviews, solutions, by.x = "solution_id", by.y = "id", all = TRUE)
head(mergedData, n = 5)
library(swirl)
swirl()
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
?quantile
filter(pack_sum, count >679)
top_counts <- filter(pack_sum, count >679)
top_counts
View(top_counts)
top_count_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
?mutate_
?mutate
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
passe\
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?contains
submit()
submit()
?group_by
sat
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total
)
sat
rm(list = ls(0))
rm(list = ls())
setwd("~/datasciencecoursera/Getting and Cleaning Data/Week 3 Quiz")
download.file(uurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "housing-Idaho.csv", method = "curl")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "housing-Idaho.csv", method = "curl")
library(readr)
housing_Idaho <- read_csv("housing-Idaho.csv")
View(housing_Idaho)
agricultureLogical <- housing_Idaho$ACR == 3 & housing_Idaho$AGS ==6
which(agricultureLogical)
## Steps to answer Questtion 1
agricultureLogical <- housing_Idaho$ACR == 3 & housing_Idaho$AGS ==6
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
library(jpeg)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "instructor.jpg", method = "curl")
jpegFile <- readJPEG("instructor.jpg", native = T)
str(jpegFile)
quantile(jpegFile, probs = c(0.3,0.8))
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
rm(list = ls())
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDP.csv", method = "curl")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "Edu Data.csv", method = "curl")
library(readr)
GDP <- read_csv("GDP.csv")
View(GDP)
library(readr)
Edu_Data <- read_csv("Edu Data.csv")
View(Edu_Data)
library(dplyr)
library(tidyr)
?tidyr
?dplyr
View(GDP)
GDP <- select(GDP, -(X3,X10))
GDP <- select(GDP, -(X3:X10))
?select
GDP <- select(GDP, X1,X2)
GDP <- select(GDP, X1,Gross domestic product 2012)
GDP <- select(GDP, -(X3:X10))
GDP <- select(GDP, -("X3":"X10"))
library(dplyr)
select(GDP, X1)
GDP <- as_tibble(GDP)
str(GDP)
select(GDP, -(X3:X10))
GDP$X1
class(GDP$`Gross domestic product 2012`)
class(GDP$`Gross domestic product 2012`) = col_number()
class(GDP$`Gross domestic product 2012`) <- col_number()
class(GDP$`Gross domestic product 2012`) <- "numeric"
GDP
select(GDP, -X3)
names(GDP)
select(Edu_Data, CountryCode)
library(dplyr)
library(readr)
library(tidyr)
select(Edu_Data, CountryCode)
dplyr::select(GDP, X1)
