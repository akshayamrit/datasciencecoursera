library(devtools)
install.packages("slidify")
search()
install_github("slidify","ramnathv")
install_github("slidify","ramnathv")
install_github(slidify','ramnathv')
install_github('slidify','ramnathv')
library(devtools)
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)
search()
library(slidify)
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
find.package("KernSmooth")
library(KernSmooth)
clear()
m <- matrix(rnorm(25,10), nrow = 5,ncol = 5)
m
solve(m)
library("matlib")
library(matlib)
install.packages("matlib")
matlib::inv(m) == solve(m)
matlib::inv(m)
solve(m)
library(xlsx)
fun(libname, pkgname)
library(openxlsx)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_211')
library(rJava)
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
Sys.setenv(JAVA_HOME="C:\Program Files (x86)\Java\jre1.8.0_211")
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_211")
find.java()
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
library(datasets)
hist(airquality$Ozone)
?bg
??bg
library(datasets)
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
?with
?plot
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
SCC <- readRDS("~/datasciencecoursera/Exploratory Data Analysis/Project 2/Source_Classification_Code.rds")
NEI <- readRDS("~/datasciencecoursera/Exploratory Data Analysis/Project 2/summarySCC_PM25.rds")
setwd("~/datasciencecoursera")
?dplyr::arrange
View(NEI)
table(NEI$Pollutant)
library(dplyr)
NEI.tEmissions <- NEI %>% group_by(year) %>% summarize(total = sum(Emissions))
library(ggplot2)
library(ggrepel)
ggconstruct <- ggplot(NEI.tEmissions, aes(year, total))
?geom_line
ggconstruct + geom_line()
ggconstruct + geom_line() + geom_text_repel(aes(label = round(NEI.tEmissions$total,2)), size = 5)
ggconstruct + geom_line() + geom_text_repel(aes(label = round(NEI.tEmissions$total,2)), size = 3)
ggconstruct + geom_line(aes(color = "blue")) + geom_text_repel(aes(label = round(NEI.tEmissions$total,2)), size = 3)
ggconstruct + geom_line(aes(color = 1)) + geom_text_repel(aes(label = round(NEI.tEmissions$total,2)), size = 3)
ggconstruct + geom_line(aes(color = "darkblue")) + geom_text_repel(aes(label = round(NEI.tEmissions$total,2)), size = 3)
ggconstruct + geom_line(color = "blue") + geom_text_repel(aes(label = round(NEI.tEmissions$total,2)), size = 3)
rm(NEI.tEmissions)
rm(ggconstruct)
NEI.balt <- NEI %>% filter(fips == "24510")
NEI.balt.total <- NEI.balt %>% group_by(year) %>% summarize(total.Pm2.5 = sum(Emissions))
ggconstruct <- ggplot(NEI.balt.total, aes(x = year, y = total.Pm2.5))
ggconstruct + geom_line(color = "blue") + geom_text_repel(aes(label = round(NEI.balt.total$total.Pm2.5,2)), size = 3)
rm(NEI.balt)
rm(NEI.balt.total)
rm(ggconstruct)
NEI.balt <- NEI %>% filter(fips == "24510")
NEI.balt.ttype <- NEI.balt %>% group_by(type, year) %>% summarize(total.pm2.5 = sum(Emissions))
ggconstruct <- ggplot(NEI.balt.ttype, aes(year, total.pm2.5))
ggconstruct + geom_line(color = type) + geom_text_repel(size = 3, aes(label = round(NEI.balt.ttype$total.pm2.5, 2)))
ggconstruct + geom_line(color = NEI.balt.ttype$type) + geom_text_repel(size = 3, aes(label = round(NEI.balt.ttype$total.pm2.5, 2)))
ggconstruct + geom_line(aes(color = type)) + geom_text_repel(size = 3, aes(label = round(NEI.balt.ttype$total.pm2.5, 2)))
ggtotal <- ggconstruct + geom_line(aes(color = type)) + geom_text_repel(size = 3, aes(label = round(NEI.balt.ttype$total.pm2.5, 2)))
NEI.balt.ttype <- NEI.balt %>% group_by(type, year) %>% summarize(total.pm2.5 = sum(Emissions), median.pm2.5 = median(Emissions))
ggconstruct <- ggplot(NEI.balt.ttype, aes(year, median.pm2.5))
ggmedian <- ggconstruct + geom_line(aes(color = type)) + geom_text(size = 3, aes(label = round(NEI.balt.ttype$median.pm2.5,2)))
facet_grid(ggtotal, ggmedian, nrow = 2)
gridExtra::grid.arrange(ggtotal, ggmedian, nrow = 2)
ggtotal
dev.off()
rm(list = ls())
library(kernlab)
install.packages("kernlab")
install.packages(c("dataMaid", "ggplot2", "httr", "knitr", "markdown", "pkgbuild", "quantreg", "Rcpp", "testthat", "tinytex", "xml2"))
library(kernlab)
dim(spam)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size =1, prob = 0.5)
dim(spam)
trainSpam <- spam[trainSpam == 1,]
trainSpam <- spam[trainIndicator == 1,]
testSpam <- spam[trainIndicator == 0,]
View(spam)
names(trainSpam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster <- hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) {
sum(x != (y > 0.5))
} cvError =
rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = as.formula(paste("numType~", names(trainSpam)[i], sep = ""))
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
costFunction <- function(x,y)sum(x != (y>0.5))
cVError <- rep(NA,55)
plot(cars)
rnorm(m = 5, mean = 1, sd = 0.5)
rnorm(n = 5, mean = 1, sd = 0.5)
