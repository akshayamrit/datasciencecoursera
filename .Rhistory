library(devtools)
install.packages("slidify")
search()
install_github("slidify","ramnathv")
install_github("slidify","ramnathv")
install_github(slidify','ramnathv')
install_github('slidify','ramnathv')
library(devtools)
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)
search()
library(slidify)
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
find.package("KernSmooth")
library(KernSmooth)
clear()
m <- matrix(rnorm(25,10), nrow = 5,ncol = 5)
m
solve(m)
library("matlib")
library(matlib)
install.packages("matlib")
matlib::inv(m) == solve(m)
matlib::inv(m)
solve(m)
library(xlsx)
fun(libname, pkgname)
library(openxlsx)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_211')
library(rJava)
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
Sys.setenv(JAVA_HOME="C:\Program Files (x86)\Java\jre1.8.0_211")
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_211")
find.java()
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL")
library(MySQL)
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "Ownedu_399", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="root",
password = "Ownedu_399", dbname="db")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;") ; dbDisconnect(ucscDb)
result
hg19<- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:15]
dbListFields(hg19, "uniProt")
dbListFields(hg19, "HInvGeneMrna")
dbListFields(hg19, "HInvGeneMrna")
hg19<- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
dbListFields(hg19, "HInvGeneMrna")
dbGetQuery(hg19, "select count(*) from HInvGeneMrna;")
HInvGeneMrna <- dbReadTable(hg19, "HInvGeneMrna")
head(HInvGeneMrna)
rm(list = ls())
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
head(allTables)
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
quantile(affyMis$misMatches)
?quantile
affyMisSmall <- fetch(query, n= 10)
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/bioLite.org")
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(rhdf5)
install.packages("rhdf5")
BiocManager::install("rhdf5")
library(rhdf5)
created = h5createFile(example.h5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr = 5, nc = 2)
h5write(A, "example.h5", "foo/ A")
B = array(seq(0.1,2.0, by = 0.1), dim = c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", foo/foobaa/B)
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
htmlCode
close(con)
library(XML)
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
html
html <- htmlTreeParse(url)
html <- htmlTreeParse(url, useInternalNodes = TRUE)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = TRUE)
library(httr)
html <- htmlTreeParse(rawToChar(GET(url)$content), useInternalNodes = TRUE)
head(html)
html
xpathSApply(html, "//title", xmlValue)
setwd("~/datasciencecoursera")
rm(list = ls())
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(rawToChar(GET(url)), useInternalNodes = T)
html <- htmlTreeParse(GET(url), useInternalNodes = T)
html[1]
html
close(url)
rm( list = ls())
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- GET(url = url)
html[1]
str(html)
htmlContent <- content(html, as = "text")
parseHTML <- htmlParse(htmlContent, asText = T)
xpathSApply(parseHTML, "//title", xmlValue)
View(parseHTML)
xmlSApply(parseHTML, nchar)
str(parseHTML)
con <- readLines(url)
con[10]
nchar(con[10])
