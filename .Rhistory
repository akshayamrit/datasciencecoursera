library(devtools)
install.packages("slidify")
search()
install_github("slidify","ramnathv")
install_github("slidify","ramnathv")
install_github(slidify','ramnathv')
install_github('slidify','ramnathv')
library(devtools)
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)
search()
library(slidify)
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
find.package("KernSmooth")
library(KernSmooth)
clear()
m <- matrix(rnorm(25,10), nrow = 5,ncol = 5)
m
solve(m)
library("matlib")
library(matlib)
install.packages("matlib")
matlib::inv(m) == solve(m)
matlib::inv(m)
solve(m)
library(xlsx)
fun(libname, pkgname)
library(openxlsx)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_211')
library(rJava)
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
Sys.setenv(JAVA_HOME="C:\Program Files (x86)\Java\jre1.8.0_211")
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_211")
find.java()
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_211')
find.java()
library(datasets)
hist(airquality$Ozone)
?bg
??bg
library(datasets)
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
?with
?plot
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
install.packages(c("fields", "hms", "pkgbuild", "rgl", "rmarkdown", "sys", "xfun"))
head(stormData.damage.analysis, n = 10)
if(!file.exists("StormData.csv.bz2")) {
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "StormData.csv.bz2", method = "curl")
}
if(!file.exists("StromDataDoc.pdf")){
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf",
destfile = "StromDataDoc.pdf", method = "curl")
}
library(data.table)
readTime <- proc.time()
stormData <- fread("StormData.csv.bz2")
proc.time()-readTime
rm(readTime)
dim(stormData)
str(stormData)
length(unique(stormData$EVTYPE))
# Removing unwanted columns from table:
library(tidyverse)
stormData <- stormData %>% select(c(BGN_DATE, COUNTY, COUNTYNAME, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP))
# Removing redundant rows:
stormData <- stormData %>% filter(FATALITIES != 0 | INJURIES != 0 | PROPDMG != 0 | CROPDMG != 0)
# Changing format of Columns:
library(lubridate)
stormData$BGN_DATE <-  mdy_hms(stormData$BGN_DATE)
stormData$EVTYPE <- str_squish(stormData$EVTYPE)
stormData$PROPDMGEXP <- as.factor(str_to_upper(stormData$PROPDMGEXP))
stormData$CROPDMGEXP <- as.factor(str_to_upper(stormData$CROPDMGEXP))
# Using EXP columns to modify DMG and removing them.
stormData <- stormData %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% c("", "?", "-"), PROPDMG * 0, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "+", PROPDMG * 1, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "H", PROPDMG * 100, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "K", PROPDMG * 1000, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "M", PROPDMG * 1000000, PROPDMG)) %>%
mutate(PROPDMG = if_else(PROPDMGEXP %in% "B", PROPDMG * 1000000000, PROPDMG))
stormData <- stormData %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% c("", "?", "-"), CROPDMG * 0, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "+", CROPDMG * 1, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "H", CROPDMG * 100, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "K", CROPDMG * 1000, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "M", CROPDMG * 1000000, CROPDMG)) %>%
mutate(CROPDMG = if_else(CROPDMGEXP %in% "B", CROPDMG * 1000000000, CROPDMG))
stormData <- stormData %>% select(-c(PROPDMGEXP, CROPDMGEXP))
# Extracting list of events from Documentation.
library(pdftools)
documentation.events <- pdf_text("StromDataDoc.pdf") %>% read_lines()
firstLine <- grep("2.1.1   Storm Data Event Table", documentation.events)
documentation.events <- documentation.events[(firstLine + 2): (firstLine + 25)]
rm(firstLine)
documentation.events <- documentation.events %>%
str_replace_all(pattern = "Z$", replacement = "") %>%
str_replace_all(pattern = "C$", replacement = "") %>%
str_replace_all(pattern = "M$", replacement = "") %>%
str_replace_all(pattern = " Z ", replacement = ".") %>%
str_replace_all(pattern = " C ", replacement = ".") %>%
str_replace_all(pattern = " M ", replacement = ".") %>%
strsplit(split = ".", fixed = TRUE) %>%
unlist() %>%
str_squish()
# Modifying event types in stormData table to match with values present in documentation
for(i in 1:length(documentation.events)){
stormData[agrepl(pattern = documentation.events[i], x = stormData$EVTYPE, ignore.case = TRUE),5] = documentation.events[i]
}
rm(i)
str(stormData)
length(unique(stormData$EVTYPE))
# Creating table to be used to answer our first query.
stormData.harm <- stormData %>%
group_by(year = year(BGN_DATE), EVTYPE) %>%
summarize(pop.harm = sum(FATALITIES)+sum(INJURIES)) %>%
arrange(year)
# Determining whether typos in events will have impact on our result
stormData.harm.analysis <- stormData.harm %>%
group_by(EVTYPE) %>%
summarize(pop.harm = sum(pop.harm)) %>%
arrange(desc(pop.harm))
stormData.harm.analysis <- stormData.harm.analysis %>%
mutate(EVTYPE = if_else(!(str_to_upper(EVTYPE) %in% str_to_upper(documentation.events)), "Others", EVTYPE)) %>%
group_by(EVTYPE) %>%
summarize(pop.harm = sum(pop.harm)) %>%
arrange(desc(pop.harm))
# Creating table to be used to answer our first query.
stormData.damage <- stormData %>%
group_by(year = year(BGN_DATE), EVTYPE) %>%
summarize(eco.cq = sum(PROPDMG)+sum(CROPDMG)) %>%
arrange(year)
# Determining whether typos in events will have impact on our result
stormData.damage.analysis <- stormData.damage %>%
group_by(EVTYPE) %>%
summarize(eco.cq = sum(eco.cq)) %>%
arrange(desc(eco.cq))
head(stormData.damage.analysis, n = 10)
stormData.damage.analysis <- stormData.damage.analysis %>%
mutate(EVTYPE = if_else(!(str_to_upper(EVTYPE) %in% str_to_upper(documentation.events)), "Others", EVTYPE)) %>%
group_by(EVTYPE) %>%
summarize(eco.cq = sum(eco.cq)) %>%
arrange(desc(eco.cq))
head(stormData.damage.analysis, n = 10)
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE))
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0)
head(stormData.damage.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.damage.analysis, aes(x = "", y = eco.cq, fill = EVTYPE))
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0)
?aes
?coord_polar
?geom_bar
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done by Each Event on Human Health")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health") + ylab("Impact on Population Health")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health") + ylab("Impact on Population Health") + xlab("")
g.harm + geom_bar(stat = "identity")+ coord_polar("y", start = 0) + labs(title = "Damage Done on Human Health",ylab("Impact on Population Health"),xlab(""))
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) + ylab("Impact on Population Health") + xlab("")
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) + ylab("Impact on Population Health") + xlab("")
?labs
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) labs(x = "", y = "Impact on Population Health", fill = "Event Types")
head(stormData.harm.analysis, n = 10)
# Visualizing table
g.harm <- ggplot(data = stormData.harm.analysis, aes(x = "", y = pop.harm, fill = EVTYPE)) + geom_bar(stat = "identity")
g.harm + coord_polar("y", start = 0) + labs(x = "", y = "Impact on Population Health", fill = "Event Types")
head(stormData.damage.analysis, n = 10)
# Visualizing table
g.eco <- ggplot(data = stormData.damage.analysis, aes(x = "", y = eco.cq, fill = EVTYPE)) + geom_bar(stat = "identity")
g.eco + coord_polar("y", start = 0) + labs(x = "", y = "Economic Consequences", fill = "Event Types")
head(stormData.harm, n = -10)
stormData.harm[stormData.harm$year == 2011,]
stormData.harm[stormData.harm$year == 2012,]
library(swirl)
swirl()
swirl()
swirl()
0.8^2
08*2
0.8*2
0.8^2
mypdf()
mypdf
integrate(mypdf, 0, 1.6)
0.5*(1.6^2)/4
0.5*(2^2)/4
sqrt(2)
99.7*.001
0.001 * 0.997
1
0.003 * 0.999
0.015 * 0.9999
0.015 * 0.999
(0.003 * 0.999) / (0.015 * 0.999 + 0.003 * 0.999)
(0.001 * 0.997) / (0.001 * 0.997 + 0.015 * 0.999)
bye()
rm(list = ls())
swirl()
1:6
sum(1:6)/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
rm(list = ls())
dev.off()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x * p)
library(swirl)
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr * PDF)
ex2_fair <- sum(dice_sqr * 1/6)
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
bye()
setwd("~/datasciencecoursera")
pnorm(170, mean = 150, sd = 20)
?pnorm
pnorm(170, mean = 150, sd = 20, lower.tail = TRUE)
pnorm(170, mean = 150, sd = 20, lower.tail = FALSE)
choose(3,2)
choose(3,0)
choose(3,2) * 0.9^2 * 0.1
choose(3,2) * 0.9^2 * 0.1 /choose(3,2)
choose(3,2)
?pbinom
pbinom(2, size = 3, prob = 0.9)
pbinom(3, size = 3, prob = 0.9)
pbinom(1, size = 3, prob = 0.9)
50 * 0.12
50*(1-0.12)
?pnorm
pnorm(0.1, mean = 0.15, sd= 0.028, lower.tail = FALSE)
?sd
0.87*200
200-0.87*200
(0.87* (1-0.87))/200
sqrt((0.87* (1-0.87))/200)
pnorm(0.85, mean = 0.87, sd = 0.024)
